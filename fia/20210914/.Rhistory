kable(round(prop.table(table(turnover$satisfacao_cat, turnover$saiu), 1), 3), caption = "Satisfação x Saiu")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=20, fig.height=10, fig.align = "center")
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
library(Metrics)
library(MLmetrics)
library("stringi")
library(knitr)
library(InformationValue)
library(moments)
library(pander)
library(dplyr)
library(cutpointr)
library(Information)
library(readxl) #Avisar o R que utilizará este pacote. Deve-se avisar toda vez que abrir o R
library(HH)
library(expss)
library(arules)
library(smbinning)
library(scorecard)
library(ggplot2)
library(ggpubr)
library(readxl)
library(caret)
library(e1071)
library("gtools")
library("partykit")
library("CHAID")
theme_set(theme_pubr())
old_theme <- theme_update(
plot.background = element_rect(fill = "lightblue3", colour = NA),
panel.background = element_rect(fill = "lightblue", colour = NA),
axis.text = element_text(colour = "linen"),
axis.title = element_text(colour = "linen")
)
base
theme_set(old_theme)
base
theme_set(old_theme)
# Square
base2 + theme(aspect.ratio = 1)
base2 <- base + theme(plot.background = element_rect(colour = "grey50"))
# Wide screen
base2 + theme(aspect.ratio = 9 / 16)
# Long and skiny
base2 + theme(aspect.ratio = 2 / 1)
# Square
base2 + theme(aspect.ratio = 1)
theme_set(old_theme)
theme_set(theme_classic(base_size = 16))
bxp + theme_stata() + scale_fill_stata()
bxp + theme_stata() + scale_fill_stat()
library(ggthemes)
install.packages("ggthemes")
# install.packages("ggthemes")
library(ggthemes)
sp + geom_rangeframe() +  theme_tufte()
theme_set(theme_economist(base_size = 16))
bxp + theme_economist() + scale_fill_economist()
p + theme_gray(base_size = 18, base_family = "Times")
theme_setp)
theme_set(p)
theme_bw() %+replace%
theme(
panel.grid.major  = element_line(color = "white"),
panel.background = element_rect(fill = "lightblue"),
panel.border = element_rect(color = "lightblue", fill = NA),
axis.line = element_line(color = "lightblue"),
axis.ticks = element_line(color = "lightblue"),
axis.text = element_text(color = "steelblue")
)
theme_set(theme_bluewhite())
theme_bluewhite <- function (base_size = 11, base_family = "") {
theme_bw() %+replace%
theme(
panel.grid.major  = element_line(color = "white"),
panel.background = element_rect(fill = "lightblue"),
panel.border = element_rect(color = "lightblue", fill = NA),
axis.line = element_line(color = "lightblue"),
axis.ticks = element_line(color = "lightblue"),
axis.text = element_text(color = "steelblue")
)
}
theme_set(theme_bluewhite())
names(xaringan:::list_css())
install.package("xaringan")
names(xaringan:::list_css())
install.package("xaringan")
install.packages("xaringan")
names(xaringan:::list_css())
xaringan::moon_reader:
css: ["default", "extra.css"]
---
theme_set(theme_pubr())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=20, fig.height=10, fig.align = "center")
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
# install.packages("ggthemes")
library(ggthemes)
library(Metrics)
library(MLmetrics)
library("stringi")
library(knitr)
library(InformationValue)
library(moments)
library(pander)
library(dplyr)
library(cutpointr)
library(Information)
library(readxl) #Avisar o R que utilizará este pacote. Deve-se avisar toda vez que abrir o R
library(HH)
library(expss)
library(arules)
library(smbinning)
library(scorecard)
library(ggplot2)
library(ggpubr)
library(readxl)
library(caret)
library(e1071)
library("gtools")
library("partykit")
library("CHAID")
theme_bluewhite <- function (base_size = 11, base_family = "") {
theme_bw() %+replace%
theme(
panel.grid.major  = element_line(color = "white"),
panel.background = element_rect(fill = "lightblue"),
panel.border = element_rect(color = "lightblue", fill = NA),
axis.line = element_line(color = "lightblue"),
axis.ticks = element_line(color = "lightblue"),
axis.text = element_text(color = "steelblue")
)
}
theme_set(theme_bluewhite())
refeicoes <- read_excel("doc/Pedidos_Refeicoes.xlsx", sheet="Base de Dados")
View(refeicoes)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=20, fig.height=10, fig.align = "center")
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
library(Metrics)
library(MLmetrics)
library("stringi")
library(knitr)
library(InformationValue)
library(moments)
library(pander)
library(dplyr)
library(cutpointr)
library(Information)
library(readxl) #Avisar o R que utilizará este pacote. Deve-se avisar toda vez que abrir o R
library(HH)
library(expss)
library(arules)
library(smbinning)
library(scorecard)
library(ggplot2)
library(ggpubr)
library(readxl)
library(caret)
library(e1071)
library("gtools")
library("partykit")
library("CHAID")
theme_set(theme_pubr())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=20, fig.height=10, fig.align = "center")
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
library(Metrics)
library(MLmetrics)
library("stringi")
library(knitr)
library(InformationValue)
library(moments)
library(pander)
library(dplyr)
library(cutpointr)
library(Information)
library(readxl) #Avisar o R que utilizará este pacote. Deve-se avisar toda vez que abrir o R
library(HH)
library(expss)
library(arules)
library(smbinning)
library(scorecard)
library(ggplot2)
library(ggpubr)
library(readxl)
library(caret)
library(e1071)
library("gtools")
library("partykit")
library("CHAID")
theme_set(theme_pubr())
refeicoes <- read_excel("doc/Pedidos_Refeicoes.xlsx", sheet="Base de Dados")
View(refeicoes)
# Transformar variaveis em fator
refeicoes[sapply(refeicoes, is.character)] <- lapply(refeicoes[sapply(refeicoes, is.character)], as.factor)
str(refeicoes)
class(refeicoes)
View(refeicoes)
sapply(refeicoes, class) # Visao geral dos tipos
refeicoes$Idade_cat <- quantcut(refeicoes$Idade, 4)
View(refeicoes)
refeicoes$Idade_cat <- ?quantcut(refeicoes$Idade, 4)
?quantcut
kable(round(prop.table(table(refeicoes$Idade_cat, refeicoes$Influenciado_por_nota), 1), 3), caption = "Idade Categoria x Nota")
kable(round(prop.table(table(refeicoes$Genero, refeicoes$Influenciado_por_nota), 1), 3), caption = "Genero x Nota")
kable(round(prop.table(table(refeicoes$Idade_cat, refeicoes$Influenciado_por_nota), 1), 3), caption = "Idade Categoria x Nota")
kable(round(prop.table(table(refeicoes$Idade_cat, refeicoes$Influenciado_por_nota), 1), 3), caption = "Idade Categoria x Nota")
kable(round(prop.table(table(refeicoes$Idade_cat)),3), caption = "Idade Categorizada")
refeicoes$Idade_cat <- ?quantcut(refeicoes$Idade, 4)
kable(round(prop.table(table(refeicoes$Idade_cat)),3), caption = "Idade Categorizada")
controle <- chaid_control(maxheight = 2)
arvore_2niveis <- chaid(Influenciado_por_nota ~
Idade_cat +
Genero +
Estado_civil +
Ocupacao +
Renda_mensal +
Grau_educacao +
Refeicao_mais_frequente +
Compras_saudaveis +
Reclamacao_atraso +
Avaliacao_media_anterior,
data = refeicoes,
control = controle)
refeicoes <- read_excel("doc/Pedidos_Refeicoes.xlsx", sheet="Base de Dados")
# Transformar variaveis em fator
refeicoes[sapply(refeicoes, is.character)] <- lapply(refeicoes[sapply(refeicoes, is.character)], as.factor)
class(refeicoes)
sapply(refeicoes, class) # Visao geral dos tipos
refeicoes$Idade_cat <- ?quantcut(refeicoes$Idade, 4)
# summary(refeicoes$Idade)
kable(round(prop.table(table(refeicoes$Idade_cat)),3), caption = "Idade Categorizada")
kable(round(prop.table(table(refeicoes$Genero)),3), caption = "Gênero")
kable(round(prop.table(table(refeicoes$Estado_civil)),3), caption = "Estado Civil")
kable(round(prop.table(table(refeicoes$Ocupacao)),3), caption = "Ocupação")
kable(round(prop.table(table(refeicoes$Renda_mensal)),3), caption = "Renda Mensal")
kable(round(prop.table(table(refeicoes$Grau_educacao)),3), caption = "Grau Educação")
kable(round(prop.table(table(refeicoes$Refeicao_mais_frequente)),3), caption = "Refeição mais Frequente")
kable(round(prop.table(table(refeicoes$Compras_saudaveis)),3), caption = "Compras Saudáveis")
kable(round(prop.table(table(refeicoes$Reclamacao_atraso)),3), caption = "Reclamação Atraso")
kable(round(prop.table(table(refeicoes$Avaliacao_media_anterior)),3), caption = "Avaliação Média Anterior")
kable(round(prop.table(table(refeicoes$Influenciado_por_nota)),3), caption ="Influenciado por Nota")
kable(round(prop.table(table(refeicoes$Grau_educacao)),3), caption = "Grau Educação")
kable(round(prop.table(table(refeicoes$Idade_cat, refeicoes$Influenciado_por_nota), 1), 3), caption = "Idade Categoria x Nota")
kable(round(prop.table(table(refeicoes$Genero, refeicoes$Influenciado_por_nota), 1), 3), caption = "Genero x Nota")
kable(round(prop.table(table(refeicoes$Idade_cat, refeicoes$Influenciado_por_nota), 1), 3), caption = "Idade Categoria x Nota")
kable(round(prop.table(table(refeicoes$Estado_civil, refeicoes$Influenciado_por_nota), 1), 3), caption = "Estado Civil x Nota")
kable(round(prop.table(table(refeicoes$Refeicao_mais_frequente, refeicoes$Influenciado_por_nota), 1), 3), caption = "Refeiçào mais frequente x Nota")
kable(round(prop.table(table(refeicoes$Compras_saudaveis, refeicoes$Influenciado_por_nota), 1), 3), caption = "Compras Saudáveis x Nota")
kable(round(prop.table(table(refeicoes$Reclamacao_atraso, refeicoes$Influenciado_por_nota), 1), 3), caption = "Reclamação Atraso x Nota")
kable(round(prop.table(table(refeicoes$Avaliacao_media_anterior, refeicoes$Influenciado_por_nota), 1), 3), caption = "Avaliação Média Anterior x Nota")
controle <- chaid_control(maxheight = 2)
arvore_2niveis <- chaid(Influenciado_por_nota ~
Idade_cat +
Genero +
Estado_civil +
Ocupacao +
Renda_mensal +
Grau_educacao +
Refeicao_mais_frequente +
Compras_saudaveis +
Reclamacao_atraso +
Avaliacao_media_anterior,
data = refeicoes,
control = controle)
# Transformar variaveis em fator
refeicoes[sapply(refeicoes, is.character)] <- lapply(refeicoes[sapply(refeicoes, is.character)], as.factor)
sapply(refeicoes, class) # Visao geral dos tipos
str(refeicoes)
controle <- chaid_control(maxheight = 2)
?chaid_control
arvore_2niveis <- chaid(Influenciado_por_nota ~
Idade_cat +
Genero +
Estado_civil +
Ocupacao +
Renda_mensal +
Grau_educacao +
Refeicao_mais_frequente +
Compras_saudaveis +
Reclamacao_atraso +
Avaliacao_media_anterior,
data = refeicoes,
control = controle)
View(arvore_2niveis)
plot(arvore_2niveis, gp = gpar(cex = 0.8))
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
round(prop.table(table(refeicoes$no_2niveis, refeicoes$Influenciado_por_nota), 1), 3)
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
round(prop.table(table(refeicoes$no_2niveis, refeicoes$Influenciado_por_nota), 1), 3)
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
round(prop.table(table(refeicoes$no_2niveis, refeicoes$Influenciado_por_nota), 1), 3)
nrow(refeicoes)
refeicoes[refeicoes$Influenciado_por_nota == "Sim",]
refeicoes[refeicoes$Influenciado_por_nota != "Sim",]
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
refeicoes$no_2niveis
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
refeicoes$no_2niveis <- predict(arvore_2niveis, refeicoes, type = "node")
rbind(table(refeicoes$no_2niveis), round(prop.table(table(refeicoes$no_2niveis)), 3))
refeicoes$no_2niveis <- predict(arvore_2niveis, refeicoes, type = "node")
View(arvore_2niveis)
View(arvore_2niveis)
# resultado1 <- confusionMatrix(actuals =  as.factor(refeicoes$Influenciado_por_nota), predictedScores = as.factor(refeicoes$prob_2niveis), data = refeicoes, )
# resultado2 <- confusionMatrix(as.factor(refeicoes$Influenciado_por_nota), as.factor(refeicoes$prob_3niveis))
resultado1 <- confusionMatrix(as.factor(refeicoes$Influenciado_por_nota),as.factor(refeicoes$predito_2niveis),positive='Sim')
View(refeicoes)
View(arvore_2niveis)
setwd(wd)
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
#Leitura da Base de Consumo de Alimentos
library(readxl)
consumo <- read_excel("dados/Consumo_Alimentos.xlsx", sheet = 'Base de Dados')
nrow(consumo)
ncol(consumo)
#**********************************************************
# Faca uma analise exploratoria da base de dados
# (obtenha as medidas de posicao e dispersao).
summary(consumo[,-1]) #Min, Q1, Q2, Q3 e Max
describeBy(consumo, group=consumo$cluster)
?describeBy
library(psych)
install.packages("psych")
library(psych)
describeBy(consumo, group=consumo$cluster)
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
library(psych)
#Leitura da Base de Consumo de Alimentos
library(readxl)
consumo <- read_excel("dados/Consumo_Alimentos.xlsx", sheet = 'Base de Dados')
nrow(consumo)
ncol(consumo)
#**********************************************************
# Faca uma analise exploratoria da base de dados
# (obtenha as medidas de posicao e dispersao).
summary(consumo[,-1]) #Min, Q1, Q2, Q3 e Max
apply(consumo[,-1] , 2 , sd) #Desvio Padrao
#Considerando o histograma das variaveis leite e carboidratos, as distribuicoes sao simetricas?
hist(consumo$leite, main="Leite")
hist(consumo$carboidratos, main="Carboidratos")
#Considerando as variaveis carne vermelha e carne branca, qual possui a maior variabilidade?
sd(consumo$carne_vermelha)/mean(consumo$carne_vermelha)*100
sd(consumo$carne_branca)/mean(consumo$carne_branca)*100
#Existe outlier nas variaveis carne vermelha e carne branca?
par(mfrow=c(1,2))
boxplot(consumo$carne_vermelha, col="paleturquoise", main="Carne vermelha")
boxplot(consumo$carne_branca, col="darkturquoise", main="Carne branca")
#**********************************************************
#Padronize as variaveis.
consumo_z<-scale(consumo[,-1])
head(consumo_z)
#Calcule a matriz de distancias euclidianas entre os 25 paises.
#Calculo da distancia euclidiana entre os elementos
distancia <- dist(consumo_z, method="euclidean") #Calculo das distancias euclidianas
distancia
#Matriz de graficos de dimensao 1 linhas x 2 colunas
par(mfrow=c(1,2))
clust_single <- hclust(distancia, method="single")
plot(clust_single, main="Metodo Single", hang=-1, labels = consumo$Pais) #hang=-1 para deixar todos iniciando do zero
rect.hclust(clust_single, k=3, border=2:4)
clust_complete <- hclust(distancia, method="complete")
plot(clust_complete, main="Metodo Complete", hang=-1, labels = consumo$Pais)
rect.hclust(clust_complete, k=3, border=2:4)
#Analise as caracteristicas de cada grupo.
#Atribui a cada pais o cluster a qual ele pertence pela variavel cluster
consumo$cluster <- as.factor(cutree(clust_complete, k=3))
#Tamanho dos Clusters
table(consumo$cluster)
#Faz BoxPlot para cada variavel e compara por cluster
#Distribuicao das variaveis por cluster
par(mfrow=c(2,5)) #coloca os graficos lado a lado
boxplot(consumo$carne_vermelha ~ consumo$cluster, col="paleturquoise", main="Carne vermelha")
boxplot(consumo$carne_branca ~ consumo$cluster, col="darkturquoise", main="Carne branca")
boxplot(consumo$ovos ~ consumo$cluster, col="paleturquoise", main="Ovos")
boxplot(consumo$leite ~ consumo$cluster, col="darkturquoise", main="Leite")
boxplot(consumo$peixes ~ consumo$cluster, col="paleturquoise", main="Peixes")
boxplot(consumo$cereais ~ consumo$cluster, col="darkturquoise", main="Cereais")
boxplot(consumo$carboidratos ~ consumo$cluster, col="paleturquoise", main="Carboidratos")
boxplot(consumo$graos ~ consumo$cluster, col="darkturquoise", main="Graos")
boxplot(consumo$fruta_vegetais ~ consumo$cluster, col="paleturquoise", main="Frutas e vegetais")
describeBy(consumo, group=consumo$cluster)
?describeBy
describeBy(consumo, group=consumo$cluster)
distancia
consumo <- read_excel("dados/Consumo_Alimentos.xlsx", sheet = 'Base de Dados')
nrow(consumo)
ncol(consumo)
View(consumo)
View(consumo_z)
#**********************************************************
# Faca uma analise exploratoria da base de dados
# (obtenha as medidas de posicao e dispersao).
summary(consumo[,-1]) #Min, Q1, Q2, Q3 e Max
apply(consumo[,-1] , 2 , sd) #Desvio Padrao
View(consumo)
#Considerando o histograma das variaveis leite e carboidratos, as distribuicoes sao simetricas?
hist(consumo$leite, main="Leite")
#Considerando o histograma das variaveis leite e carboidratos, as distribuicoes sao simetricas?
hist(consumo$leite, main="Leite")
hist(consumo$carboidratos, main="Carboidratos")
#**********************************************************
#Padronize as variaveis.
consumo_z<-scale(consumo[,-1])
head(consumo_z)
View(consumo_z)
#Calcule a matriz de distancias euclidianas entre os 25 paises.
#Calculo da distancia euclidiana entre os elementos
distancia <- dist(consumo_z, method="euclidean") #Calculo das distancias euclidianas
distancia
clust_single <- hclust(distancia, method="single")
plot(clust_single, main="Metodo Single", hang=-1, labels = consumo$Pais) #hang=-1 para deixar todos iniciando do zero
rect.hclust(clust_single, k=3, border=2:4)
clust_single <- hclust(distancia, method="single")
plot(clust_single, main="Metodo Single", hang=-1, labels = consumo$Pais) #hang=-1 para deixar todos iniciando do zero
rect.hclust(clust_single, k=3, border=2:4)
clust_complete <- hclust(distancia, method="complete")
plot(clust_complete, main="Metodo Complete", hang=-1, labels = consumo$Pais)
rect.hclust(clust_complete, k=3, border=2:4)
#Matriz de graficos de dimensao 1 linhas x 2 colunas
par(mfrow=c(1,2))
clust_single <- hclust(distancia, method="single")
plot(clust_single, main="Metodo Single", hang=-1, labels = consumo$Pais) #hang=-1 para deixar todos iniciando do zero
rect.hclust(clust_single, k=3, border=2:4)
clust_complete <- hclust(distancia, method="complete")
plot(clust_complete, main="Metodo Complete", hang=-1, labels = consumo$Pais)
rect.hclust(clust_complete, k=3, border=2:4)
#Analise as caracteristicas de cada grupo.
#Atribui a cada pais o cluster a qual ele pertence pela variavel cluster
consumo$cluster <- as.factor(cutree(clust_complete, k=3))
View(consumo)
rm(list = ls())
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
#Instalacao de pacotes (base realizar 1 vez)
install.packages("cluster")
install.packages("factoextra")
install.packages("gridExtra")
#**********************************************************
#Leitura da Base
library(readxl)
municipios <- read_excel("dados/Municipios.xlsx", sheet = 'Base de Dados')
nrow(municipios)
View(municipios)
municipios <- read_excel("dados/Municipios.xlsx", sheet = 'Base de Dados')
nrow(municipios)
ncol(municipios)
#**********************************************************
# Faca uma analise exploratoria da base de dados
# (obtenha as medidas de posicao e dispersao).
summary(municipios[,-1]) #Min, Q1, Q2, Q3 e Max
apply(municipios[,-1] , 2 , sd) #Desvio Padrao
View(municipios)
