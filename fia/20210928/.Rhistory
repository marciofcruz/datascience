stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
library(Metrics)
library(MLmetrics)
library("stringi")
library(knitr)
library(InformationValue)
library(moments)
library(pander)
library(dplyr)
library(cutpointr)
library(Information)
library(readxl) #Avisar o R que utilizará este pacote. Deve-se avisar toda vez que abrir o R
library(HH)
library(expss)
library(arules)
library(smbinning)
library(scorecard)
library(ggplot2)
library(ggpubr)
library(readxl)
library(caret)
library(e1071)
library("gtools")
library("partykit")
library("CHAID")
theme_set(theme_pubr())
turnover <- read_excel("doc/Turnover.xlsx", sheet = 'Base de Dados')
nrow(turnover)
ncol(turnover)
summary(turnover$satisfacao)
summary(turnover$horas_trabalhadas_media_mes)
cro(turnover$acidente_trabalho)
cro(turnover$promocao_ultimos_5_anos)
cro(turnover$departamento)
cro(turnover$salario)
cro(turnover$saiu)
View(turnover)
kable(round(prop.table(table(turnover$satisfacao, turnover$saiu), 1), 3), caption = "Satisfação x Saiu")
kable(round(prop.table(table(turnover$acidente_trabalho, turnover$saiu), 1), 3), caption = "Acidente Trabalho x Saiu")
kable(round(prop.table(table(turnover$promocao_ultimos_5_anos, turnover$saiu), 1), 3), caption = "Promoção Último 5 anos x Saiu")
turnover$satisfacao_cat <- quantcut(turnover$satisfacao,4)
turnover$horas_cat <- quantcut(turnover$horas_trabalhadas_media_mes,4)
kable(round(prop.table(table(turnover$horas_cat, turnover$saiu), 1), 3), caption = "Horas x Saiu")
X2 <- chisq.test(turnover$saiu,turnover$satisfacao_cat)
X2$observed
X2$expected
turnover$satisfacao_cat <- quantcut(turnover$satisfacao,4)
turnover$horas_cat <- quantcut(turnover$horas_trabalhadas_media_mes,4)
kable(round(prop.table(table(turnover$acidente_trabalho, turnover$saiu), 1), 3), caption = "Acidente Trabalho x Saiu")
kable(round(prop.table(table(turnover$promocao_ultimos_5_anos, turnover$saiu), 1), 3), caption = "Promoção Último 5 anos x Saiu")
kable(round(prop.table(table(turnover$promocao_ultimos_5_anos, turnover$saiu), 1), 3), caption = "Promoção Último 5 anos x Saiu")
kable(round(prop.table(table(turnover$satisfacao_cat, turnover$saiu), 1), 3), caption = "Satisfação x Saiu")
kable(round(prop.table(table(turnover$promocao_ultimos_5_anos, turnover$saiu), 1), 3), caption = "Promoção Último 5 anos x Saiu")
kable(round(prop.table(table(turnover$satisfacao_cat, turnover$saiu), 1), 3), caption = "Satisfação x Saiu")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=20, fig.height=10, fig.align = "center")
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
library(Metrics)
library(MLmetrics)
library("stringi")
library(knitr)
library(InformationValue)
library(moments)
library(pander)
library(dplyr)
library(cutpointr)
library(Information)
library(readxl) #Avisar o R que utilizará este pacote. Deve-se avisar toda vez que abrir o R
library(HH)
library(expss)
library(arules)
library(smbinning)
library(scorecard)
library(ggplot2)
library(ggpubr)
library(readxl)
library(caret)
library(e1071)
library("gtools")
library("partykit")
library("CHAID")
theme_set(theme_pubr())
old_theme <- theme_update(
plot.background = element_rect(fill = "lightblue3", colour = NA),
panel.background = element_rect(fill = "lightblue", colour = NA),
axis.text = element_text(colour = "linen"),
axis.title = element_text(colour = "linen")
)
base
theme_set(old_theme)
base
theme_set(old_theme)
# Square
base2 + theme(aspect.ratio = 1)
base2 <- base + theme(plot.background = element_rect(colour = "grey50"))
# Wide screen
base2 + theme(aspect.ratio = 9 / 16)
# Long and skiny
base2 + theme(aspect.ratio = 2 / 1)
# Square
base2 + theme(aspect.ratio = 1)
theme_set(old_theme)
theme_set(theme_classic(base_size = 16))
bxp + theme_stata() + scale_fill_stata()
bxp + theme_stata() + scale_fill_stat()
library(ggthemes)
install.packages("ggthemes")
# install.packages("ggthemes")
library(ggthemes)
sp + geom_rangeframe() +  theme_tufte()
theme_set(theme_economist(base_size = 16))
bxp + theme_economist() + scale_fill_economist()
p + theme_gray(base_size = 18, base_family = "Times")
theme_setp)
theme_set(p)
theme_bw() %+replace%
theme(
panel.grid.major  = element_line(color = "white"),
panel.background = element_rect(fill = "lightblue"),
panel.border = element_rect(color = "lightblue", fill = NA),
axis.line = element_line(color = "lightblue"),
axis.ticks = element_line(color = "lightblue"),
axis.text = element_text(color = "steelblue")
)
theme_set(theme_bluewhite())
theme_bluewhite <- function (base_size = 11, base_family = "") {
theme_bw() %+replace%
theme(
panel.grid.major  = element_line(color = "white"),
panel.background = element_rect(fill = "lightblue"),
panel.border = element_rect(color = "lightblue", fill = NA),
axis.line = element_line(color = "lightblue"),
axis.ticks = element_line(color = "lightblue"),
axis.text = element_text(color = "steelblue")
)
}
theme_set(theme_bluewhite())
names(xaringan:::list_css())
install.package("xaringan")
names(xaringan:::list_css())
install.package("xaringan")
install.packages("xaringan")
names(xaringan:::list_css())
xaringan::moon_reader:
css: ["default", "extra.css"]
---
theme_set(theme_pubr())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=20, fig.height=10, fig.align = "center")
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
# install.packages("ggthemes")
library(ggthemes)
library(Metrics)
library(MLmetrics)
library("stringi")
library(knitr)
library(InformationValue)
library(moments)
library(pander)
library(dplyr)
library(cutpointr)
library(Information)
library(readxl) #Avisar o R que utilizará este pacote. Deve-se avisar toda vez que abrir o R
library(HH)
library(expss)
library(arules)
library(smbinning)
library(scorecard)
library(ggplot2)
library(ggpubr)
library(readxl)
library(caret)
library(e1071)
library("gtools")
library("partykit")
library("CHAID")
theme_bluewhite <- function (base_size = 11, base_family = "") {
theme_bw() %+replace%
theme(
panel.grid.major  = element_line(color = "white"),
panel.background = element_rect(fill = "lightblue"),
panel.border = element_rect(color = "lightblue", fill = NA),
axis.line = element_line(color = "lightblue"),
axis.ticks = element_line(color = "lightblue"),
axis.text = element_text(color = "steelblue")
)
}
theme_set(theme_bluewhite())
refeicoes <- read_excel("doc/Pedidos_Refeicoes.xlsx", sheet="Base de Dados")
View(refeicoes)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=20, fig.height=10, fig.align = "center")
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
library(Metrics)
library(MLmetrics)
library("stringi")
library(knitr)
library(InformationValue)
library(moments)
library(pander)
library(dplyr)
library(cutpointr)
library(Information)
library(readxl) #Avisar o R que utilizará este pacote. Deve-se avisar toda vez que abrir o R
library(HH)
library(expss)
library(arules)
library(smbinning)
library(scorecard)
library(ggplot2)
library(ggpubr)
library(readxl)
library(caret)
library(e1071)
library("gtools")
library("partykit")
library("CHAID")
theme_set(theme_pubr())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=20, fig.height=10, fig.align = "center")
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
library(Metrics)
library(MLmetrics)
library("stringi")
library(knitr)
library(InformationValue)
library(moments)
library(pander)
library(dplyr)
library(cutpointr)
library(Information)
library(readxl) #Avisar o R que utilizará este pacote. Deve-se avisar toda vez que abrir o R
library(HH)
library(expss)
library(arules)
library(smbinning)
library(scorecard)
library(ggplot2)
library(ggpubr)
library(readxl)
library(caret)
library(e1071)
library("gtools")
library("partykit")
library("CHAID")
theme_set(theme_pubr())
refeicoes <- read_excel("doc/Pedidos_Refeicoes.xlsx", sheet="Base de Dados")
View(refeicoes)
# Transformar variaveis em fator
refeicoes[sapply(refeicoes, is.character)] <- lapply(refeicoes[sapply(refeicoes, is.character)], as.factor)
str(refeicoes)
class(refeicoes)
View(refeicoes)
sapply(refeicoes, class) # Visao geral dos tipos
refeicoes$Idade_cat <- quantcut(refeicoes$Idade, 4)
View(refeicoes)
refeicoes$Idade_cat <- ?quantcut(refeicoes$Idade, 4)
?quantcut
kable(round(prop.table(table(refeicoes$Idade_cat, refeicoes$Influenciado_por_nota), 1), 3), caption = "Idade Categoria x Nota")
kable(round(prop.table(table(refeicoes$Genero, refeicoes$Influenciado_por_nota), 1), 3), caption = "Genero x Nota")
kable(round(prop.table(table(refeicoes$Idade_cat, refeicoes$Influenciado_por_nota), 1), 3), caption = "Idade Categoria x Nota")
kable(round(prop.table(table(refeicoes$Idade_cat, refeicoes$Influenciado_por_nota), 1), 3), caption = "Idade Categoria x Nota")
kable(round(prop.table(table(refeicoes$Idade_cat)),3), caption = "Idade Categorizada")
refeicoes$Idade_cat <- ?quantcut(refeicoes$Idade, 4)
kable(round(prop.table(table(refeicoes$Idade_cat)),3), caption = "Idade Categorizada")
controle <- chaid_control(maxheight = 2)
arvore_2niveis <- chaid(Influenciado_por_nota ~
Idade_cat +
Genero +
Estado_civil +
Ocupacao +
Renda_mensal +
Grau_educacao +
Refeicao_mais_frequente +
Compras_saudaveis +
Reclamacao_atraso +
Avaliacao_media_anterior,
data = refeicoes,
control = controle)
refeicoes <- read_excel("doc/Pedidos_Refeicoes.xlsx", sheet="Base de Dados")
# Transformar variaveis em fator
refeicoes[sapply(refeicoes, is.character)] <- lapply(refeicoes[sapply(refeicoes, is.character)], as.factor)
class(refeicoes)
sapply(refeicoes, class) # Visao geral dos tipos
refeicoes$Idade_cat <- ?quantcut(refeicoes$Idade, 4)
# summary(refeicoes$Idade)
kable(round(prop.table(table(refeicoes$Idade_cat)),3), caption = "Idade Categorizada")
kable(round(prop.table(table(refeicoes$Genero)),3), caption = "Gênero")
kable(round(prop.table(table(refeicoes$Estado_civil)),3), caption = "Estado Civil")
kable(round(prop.table(table(refeicoes$Ocupacao)),3), caption = "Ocupação")
kable(round(prop.table(table(refeicoes$Renda_mensal)),3), caption = "Renda Mensal")
kable(round(prop.table(table(refeicoes$Grau_educacao)),3), caption = "Grau Educação")
kable(round(prop.table(table(refeicoes$Refeicao_mais_frequente)),3), caption = "Refeição mais Frequente")
kable(round(prop.table(table(refeicoes$Compras_saudaveis)),3), caption = "Compras Saudáveis")
kable(round(prop.table(table(refeicoes$Reclamacao_atraso)),3), caption = "Reclamação Atraso")
kable(round(prop.table(table(refeicoes$Avaliacao_media_anterior)),3), caption = "Avaliação Média Anterior")
kable(round(prop.table(table(refeicoes$Influenciado_por_nota)),3), caption ="Influenciado por Nota")
kable(round(prop.table(table(refeicoes$Grau_educacao)),3), caption = "Grau Educação")
kable(round(prop.table(table(refeicoes$Idade_cat, refeicoes$Influenciado_por_nota), 1), 3), caption = "Idade Categoria x Nota")
kable(round(prop.table(table(refeicoes$Genero, refeicoes$Influenciado_por_nota), 1), 3), caption = "Genero x Nota")
kable(round(prop.table(table(refeicoes$Idade_cat, refeicoes$Influenciado_por_nota), 1), 3), caption = "Idade Categoria x Nota")
kable(round(prop.table(table(refeicoes$Estado_civil, refeicoes$Influenciado_por_nota), 1), 3), caption = "Estado Civil x Nota")
kable(round(prop.table(table(refeicoes$Refeicao_mais_frequente, refeicoes$Influenciado_por_nota), 1), 3), caption = "Refeiçào mais frequente x Nota")
kable(round(prop.table(table(refeicoes$Compras_saudaveis, refeicoes$Influenciado_por_nota), 1), 3), caption = "Compras Saudáveis x Nota")
kable(round(prop.table(table(refeicoes$Reclamacao_atraso, refeicoes$Influenciado_por_nota), 1), 3), caption = "Reclamação Atraso x Nota")
kable(round(prop.table(table(refeicoes$Avaliacao_media_anterior, refeicoes$Influenciado_por_nota), 1), 3), caption = "Avaliação Média Anterior x Nota")
controle <- chaid_control(maxheight = 2)
arvore_2niveis <- chaid(Influenciado_por_nota ~
Idade_cat +
Genero +
Estado_civil +
Ocupacao +
Renda_mensal +
Grau_educacao +
Refeicao_mais_frequente +
Compras_saudaveis +
Reclamacao_atraso +
Avaliacao_media_anterior,
data = refeicoes,
control = controle)
# Transformar variaveis em fator
refeicoes[sapply(refeicoes, is.character)] <- lapply(refeicoes[sapply(refeicoes, is.character)], as.factor)
sapply(refeicoes, class) # Visao geral dos tipos
str(refeicoes)
controle <- chaid_control(maxheight = 2)
?chaid_control
arvore_2niveis <- chaid(Influenciado_por_nota ~
Idade_cat +
Genero +
Estado_civil +
Ocupacao +
Renda_mensal +
Grau_educacao +
Refeicao_mais_frequente +
Compras_saudaveis +
Reclamacao_atraso +
Avaliacao_media_anterior,
data = refeicoes,
control = controle)
View(arvore_2niveis)
plot(arvore_2niveis, gp = gpar(cex = 0.8))
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
round(prop.table(table(refeicoes$no_2niveis, refeicoes$Influenciado_por_nota), 1), 3)
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
round(prop.table(table(refeicoes$no_2niveis, refeicoes$Influenciado_por_nota), 1), 3)
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
round(prop.table(table(refeicoes$no_2niveis, refeicoes$Influenciado_por_nota), 1), 3)
nrow(refeicoes)
refeicoes[refeicoes$Influenciado_por_nota == "Sim",]
refeicoes[refeicoes$Influenciado_por_nota != "Sim",]
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
refeicoes$no_2niveis
(prob_geral = sum(refeicoes$Influenciado_por_nota == "Sim") / nrow(refeicoes))
refeicoes$no_2niveis <- predict(arvore_2niveis, refeicoes, type = "node")
rbind(table(refeicoes$no_2niveis), round(prop.table(table(refeicoes$no_2niveis)), 3))
refeicoes$no_2niveis <- predict(arvore_2niveis, refeicoes, type = "node")
View(arvore_2niveis)
View(arvore_2niveis)
# resultado1 <- confusionMatrix(actuals =  as.factor(refeicoes$Influenciado_por_nota), predictedScores = as.factor(refeicoes$prob_2niveis), data = refeicoes, )
# resultado2 <- confusionMatrix(as.factor(refeicoes$Influenciado_por_nota), as.factor(refeicoes$prob_3niveis))
resultado1 <- confusionMatrix(as.factor(refeicoes$Influenciado_por_nota),as.factor(refeicoes$predito_2niveis),positive='Sim')
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
#Instalando e carregando bibliotecas
# install.packages("cluster")
# install.packages("flexclust")
# install.packages("NbClust")
library(flexclust)
library(NbClust)
library(cluster)
library(readxl)
library(ggplot2)
library(tidyverse)
library(factoextra)
wd <- Sys.getenv("RWD")
if (!file.exists(wd)) {
stop(paste("O diretorio definido na variavel de ambiente RWD nao foi encontrado",wd, sep="="))
}
setwd(wd)
getwd()
rm(list = ls())
options(scipen=999)
options(width = 1024)
library(readxl)
dados <- read_excel("dados/Cancelamento de seguros v2.xlsx", sheet = "BASE_DADOS")
dados <- read_excel("dados/Cancelamento de seguros v2.xlsx", sheet = "BASE DE DADOS")
View(dados)
str(dados)
unique(dados$sexo)
View(dados)
unique(dados$id)
len(unique(dados$id))
dim(unique(dados$id)
nrow(unique(dados$id)
nrows(unique(dados$id)
View(dados)
View(dados)
unique(dados$id)
dim(unique(dados$id))
length(unique(dados$id))
unique(dados$id) %>% length()
dados$id <- NULL
str(dados)
View(dados)
dados2 <- dados[,-c("id")]
View(dados)
str(dados)
table(dados$produto)
table(dados$produto) %>% prop.table()
# Analise Univariada ------------------------------------------------------
head(dados)
table(dados$Pagamento) %>% prop.table()
table(dados%uf) %>% prop.table()
table(dados%uf) %>% prop.table()
table(dados$uf) %>% prop.table()
table(dados$uf) %>% prop.table()*100
table(dados$uf) %>% prop.table()
# Analise Univariada ------------------------------------------------------
head(dados)
table(dados$est_civ) %>% prop.table()
table(dados$sexo) %>% prop.table()
table(dados$uf) %>% prop.table()
table(dados$uf)
dados[dados%uf == 'CE']
dados[dados%uf == 'CE',]
dados[dados$uf == 'CE',]
dados$regiao <-ifelse(dados$uf %in% c("SP", "RJ", "ES", "MG"), "SUDESTE",
ifelse(dados$uf %in% c("RS", "SC", "PR"), "SUL",
ifelse(dados$uf %in% c("DF", "MT", "MS", "GO"), "CENTRO-OESTE",
ifelse(dados$uf %in% c("AL", "PI", "CE", "PE", "PB", "RN", "SE", "BA", "MA"), "NORDESTE",
ifelse(dados$uf %in% c("TO", "AM", "PA", "RR", "RO", "AC", "AP"), "NORTE", "SEM INFO")))))
View(dados)
head(dados)
str(dados)
dados[dados$regiao == "SEM INFO",]
library(lubridate)
dados$dt_nasc %>% as.Date()
dados$dtnasc <- dados$dt_nasc %>% as.Date()
str(dados)
View(dados)
dados$dtnasc <- as.Date(dados$dt_nasc)
str(dados)
lubridate::now()
lubridate::now()-dados$dt_nasc
lubridate::years(now(), dados$dt_nasc)
?lubridate::years()
difftime(lubridate:now(), dados$dtnasc)
difftime(lubridate::now(), dados$dtnasc)
?difftime
difftime(lubridate::now(), dados$dtnasc, units = "days")
difftime(lubridate::now(), dados$dtnasc, units = "days")
difftime(lubridate::now(), dados$dtnasc, units = c("days")
difftime(lubridate::now(), dados$dtnasc, units = c("days"))
difftime(lubridate::now(), dados$dtnasc)
difftime(lubridate::now(), dados$dtnasc, units = "auto")
difftime(lubridate::now(), dados$dtnasc, units = "days")
difftime(lubridate::now(), dados$dtnasc, units = "days") / 365.25
difftime(lubridate::now(), dados$dtnasc, units = "days") / 365.25 %>% floor() %>% as.numeric()
difftime(lubridate::now(), dados$dtnasc, units = "days") / 365.25 %>% floor() %>% as.numeric()
difftime(lubridate::now(), dados$dtnasc, units = "days") / 365.25 %>% as.integer()
dados$idade <- difftime(lubridate::now(), dados$dtnasc, units = "days") / 365.25 %>% as.integer()
str(dados$idade)
str(dados$idade)
summary(dados$idade)
