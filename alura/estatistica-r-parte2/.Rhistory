2 + 2
R.version()
r.version()
R.version
source('C:/Projetos/github.com/datascience/fia/20210518/aula 20210518.R')
source('C:/Projetos/github.com/datascience/fia/20210518/aula 20210518.R')
source('C:/Projetos/github.com/datascience/fia/20210518/aula 20210518.R')
source('C:/Projetos/github.com/datascience/fia/20210518/aula 20210518.R')
source('C:/Projetos/github.com/datascience/fia/20210518/aula 20210518.R')
source('C:/Projetos/github.com/datascience/fia/20210518/aula 20210518.R')
source('C:/Projetos/github.com/datascience/fia/20210518/aula 20210518.R')
source('C:/Projetos/github.com/datascience/fia/20210518/aula 20210518.R')
StartDate < as.Date("2020/2/28")
StartDate <- as.Date("2020/2/28")
StopDate < as.Date("2020/3/1")
StopDate <- as.Date("2020/3/1")
StopDate - StartDate
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
teste <- c(1,2,3,4)
teste <- c(1,2,3,4)
teste
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/aula1.R', encoding = 'UTF-8', echo=TRUE)
choose(60,6)
choose(60,6)
teste <- choose(60,6)
combinacoes <- choose(25,20)
1 / combinacoes
combinacoes = choose(25, 20)
probabilidade = 1 / combinacoes
sprintf('Combinações = %d e Probabilidade = %0.15f', combinacoes, probabilidade)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/aula1.R', encoding = 'UTF-8', echo=TRUE)
prob <- 1/3
dbinom(x = k, size = n, prob = p)
# Binomial ----------------------------------------------------------------
k <- 5 # Experimentos para obter sucesso
n <- 10 # Elementos de estudo
prob <- 1/3
dbinom(x = k, size = n, prob = p)
# Binomial ----------------------------------------------------------------
k <- 5 # Experimentos para obter sucesso
n <- 10 # Elementos de estudo
p <- 1/3
dbinom(x = k, size = n, prob = p)
sprinf("Teste")
sprintf("Teste")
# Binomial ----------------------------------------------------------------
k <- 5 # Experimentos para obter sucesso
n <- 10 # Elementos de estudo
p <- 1/3
result <- dbinom(x = k, size = n, prob = p)
sprintf("P(X = %d) = %.4f", k, result)
sprintf("P(X = %d) é %.4f", k, result)
sprintf("P(X = %d) é %.4f", k, result)
sprintf("P(X <= %d) é %.4f", k, result)
result <- dbinom(x = k, size = n, prob = p, log.p = T)
result <- dbinom(x = k, size = n, prob = p, lower.tail = T)
sprintf("P(X = %d) é %.4f", k, result)
sprintf("P(X <= %d) é %.4f", k, result)
result <- dbinom(x = k, size = n, prob = p, lower.tail = T)
result <- dbinom(x = k, size = n, prob = p, lower.tail = T)
result <- dbinom(x = k, size = n, prob = p)
probabilidade_exata
probabilidade_exata <- dbinom(x = k, size = n, prob = p)
sprintf("P(X = %d) é %.4f", k, probabilidade_exata)
1 - probabilidade
probabilidade_exata <- dbinom(x = k, size = n, prob = p)
1 - probabilidade
probabilidade_exata
1 - probabilidade_exata
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/aula1.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/aula1.R', encoding = 'UTF-8', echo=TRUE)
probabilidade_menorouigual <-pbinom(q = 4, size = n, lower.tail = T, log.p = F)
probabilidade_exata <- dbinom(x = k, size = n, prob = p)
probabilidade_menorouigual <-pbinom(q = 4, size = n, lower.tail = T, log.p = F)
# Binomial ----------------------------------------------------------------
k <- 5 # Experimentos para obter sucesso
n <- 10 # Elementos de estudo
p <- 1/3
probabilidade_exata <- dbinom(x = k, size = n, prob = p)
probabilidade_menorouigual <- pbinom(q = 4, size = n, lower.tail = T, log.p = F)
probabilidade_menorouigual <- pbinom(q = k, size = n, prop = b, lower.tail = T)
probabilidade_menorouigual <- pbinom(q = k, size = n, prob = b, lower.tail = T)
probabilidade_menorouigual <- pbinom(q = k, size = n, prob = p, lower.tail = T)
sprintf("P(X = %d) é %.4f", k, probabilidade_exata)
sprintf("P(X <= %d) é %.4f", k, probabilidade_menorouigual)
probabilidade_maior <- 1 -probabilidade_menorouigual
probabilidade_exata <- dbinom(x = k, size = n, prob = p)
probabilidade_menorouigual <- pbinom(q = k, size = n, prob = p, lower.tail = T)
probabilidade_maior <- 1 -probabilidade_menorouigual
sprintf("P(X = %d) é %.4f", k, probabilidade_exata)
sprintf("P(X <= %d) é %.4f", k, probabilidade_menorouigual)
sprintf("P(X > %d) é %.4f", k, probabilidade_maior)
probabilidade_Maiorouigual <- probabilidade_maior + probabilidade_exata
sprintf("P(X >= %d) é %.4f", k, probabilidade_Maiorouigual)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/aula1.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
probabilidade_exata <- dbinom(x = k, size = n, prob = p)
probabilidade_menorouigual <- pbinom(q = k, size = n, prob = p, lower.tail = T)
probabilidade_maior <- 1 -probabilidade_menorouigual
probabilidade_Maiorouigual <- probabilidade_maior + probabilidade_exata
probabilidade_menor <- probabilidade_menorouigual - probabilidade_exata
sprintf("P(X = %d) é %.4f", k, probabilidade_exata)
sprintf("P(X < %d) é %.4f", k, probabilidade_menor)
probabilidade_exata <- dbinom(x = k, size = n, prob = p)
probabilidade_menorouigual <- pbinom(q = k, size = n, prob = p, lower.tail = T)
probabilidade_maior <- 1 -probabilidade_menorouigual
probabilidade_Maiorouigual <- probabilidade_maior + probabilidade_exata
probabilidade_menor <- probabilidade_menorouigual - probabilidade_exata
sprintf("P(X = %d) é %.4f", k, probabilidade_exata)
sprintf("P(X <= %d) é %.4f", k, probabilidade_menorouigual)
sprintf("P(X > %d) é %.4f", k, probabilidade_maior)
sprintf("P(X >= %d) é %.4f", k, probabilidade_Maiorouigual)
sprintf("P(X < %d) é %.4f", k, probabilidade_menor)
c = (probabilidade_exata)
nome <- ('probabilidade_exata')
rbind(c, nome)
rbind(nome, c)
teste <- rbind(nome, c)
teste
teste[1]
colnames(teste)
teste <- cbind(nome, c)
teste
colnames(teste)
nome <- ('probabilidade_exata')
c <- (probabilidade_exata)
teste <- cbind(nome, c)
teste
teste <- data.frame(nome,c)
teste
nome <- c('probabilidade_exata')
c <- (probabilidade_exata)
teste <- data.frame(nome,c)
teste
colnames(teste)
nome <- c('probabilidade_exata')
c <- c(probabilidade_exata)
teste <- data.frame(nome,c)
teste
colnames(teste)
colnames(teste)
teste <- data.frame(nome,c)
teste
str(teste))
str(teste)
typeof(teste)
source('~/.active-rstudio-document', echo=TRUE)
class.df
nome <- c('probabilidade_exata')
valores <- c(probabilidade_exata)
resultado <- data.frame(nome,c)
resultado
resultado
tipo <- c('probabilidade_exata')
valores <- c(probabilidade_exata)
resultado <- data.frame(nome,c)
resultado
colnames(tipo)
resultado <- data.frame(tipo, valores)
resultado
resultado[1]
resultado[2]
resultado$tipo
resultado[resultado$tipo = "probabilidade_exata"]
resultado[resultado$tipo == "probabilidade_exata",]
resultado$valores[resultado$tipo == "probabilidade_exata"]
probabilidade <- c('probabilidade_exata')
probabilidade <- c('probabilidade_exata')
valor <- c(probabilidade_exata)
resultado <- data.frame(probabilidade, valor)
resultado$valores[resultado$tipo == "probabilidade_exata"]
resultado
probabilidade <- c('valor_exato')
valor <- c(probabilidade_exata)
resultado <- data.frame(probabilidade, valor)
resultado
k <- 5 # Experimentos para obter sucesso
n <- 10 # Elementos de estudo
p <- 1/3
exata <- dbinom(x = k, size = n, prob = p)
menorouigual <- pbinom(q = k, size = n, prob = p, lower.tail = T)
maior <- 1 - menorouigual
maiorouigual <- maior + exata
menor <- menorouigual - exata
probabilidade <- fnc_probabilidades(k, n, p)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
resultado
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
meida = 30 * probabilidade.exata
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_binomial.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
# Construindo uma tabela padronizada
Z <- seq(0, 3.99, by=0.01)
probabilidade <- pnorm(Z)
tabela_normal_padronizada <- matriz(probabilidade, ncol=10, byrow = T)
tabela_normal_padronizada <- matrix(probabilidade, ncol=10, byrow = T)
colnames(tabela_normal_padronizada) <= format(seq(0.00, 0.09, by=0.01))
rownames(tabela_normal_padronizada) <- format(seq(0.00, 3.90, by=0.10), digits =2, nsmall = 2)
tabela_normal_padronizada
z <- (200 - 190) / 15
z <- (x- media_populacional) / desvio_padrao_populacional
z
x <- 1.80
z <- (x- media_populacional) / desvio_padrao_populacional
z
# Calculos
media_populacional <- 1.7
desvio_padrao_populacional <- 0.1
x <- 1.80
z <- (x- media_populacional) / desvio_padrao_populacional
z
pnorm(z)
sprintf(("P(X < %.2f) = %.4f", x, exato)
sprintf("P(X < %.2f) = %.4f", x, exato)
exato <- pnorm(z)
sprintf("P(X < %.2f) = %.4f", x, exato)
sprintf("P(X < %.2f) = %.4f", x, exato)
sprintf("P(X > %.2f) = %.4f", x, 1-exato)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
z_superior <- (x_final - media_populacional) / desvio_padrao_populacional
z_inferior <- (x_inicial - media_populacional) / desvio_padrao_populacional
z_superior <- (x_final - media_populacional) / desvio_padrao_populacional
x_inicial <- 1.6
x_final <- 1.8
z_inferior <- (x_inicial - media_populacional) / desvio_padrao_populacional
# Calculo para intervalo
media_populacional <- 1.7
desvio_padrao_populacional <- 0.1
x_inicial <- 1.6
x_final <- 1.8
z_inferior <- (x_inicial - media_populacional) / desvio_padrao_populacional
z_superior <- (x_final - media_populacional) / desvio_padrao_populacional
probabilidade < pnorm(z_superior) - pnorm(z_inferior)
probabilidade <- pnorm(z_superior) - pnorm(z_inferior)
probabilidade
sprintf("P(%.2f < X < %.2f) = %.4f", x_inicial, x_final, probabilidade)
# Calculo para intervalo
media_populacional <- 300
desvio_padrao_populacional <- 50
x_inicial <- 250
x_final <- 350
z_inferior <- (x_inicial - media_populacional) / desvio_padrao_populacional
z_superior <- (x_final - media_populacional) / desvio_padrao_populacional
probabilidade <- pnorm(z_superior) - pnorm(z_inferior)
sprintf("P(%.2f < X < %.2f) = %.4f", x_inicial, x_final, probabilidade)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
probabilidade * 100
probabilidade * 500
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
# Calculo para 1 variável
media_populacional <- 80
desvio_padrao_populacional <- 10
x <- 90
z <- (x- media_populacional) / desvio_padrao_populacional
probabilidade <- pnorm(z)
sprintf("P(X < %.2f) = %.4f", x, probabilidade)
sprintf("P(X > %.2f) = %.4f", x, 1-probabilidade)
probabilidade*60
round(probabilidade*60)
round((1-probabilidade)*60)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Projetos/github.com/datascience/alura/estatistica-r-parte2/exercicio_normal.R', encoding = 'UTF-8', echo=TRUE)
# Calculo para 1 variável
media_populacional <- 20
desvio_padrao_populacional <- 5
x <- 30
# Calculo para 1 variável
media_populacional <- 20
desvio_padrao_populacional <- 5
x <- 30
z <- (x- media_populacional) / desvio_padrao_populacional
probabilidade <- pnorm(z)
round((1-probabilidade)*60)
sprintf("P(X < %.2f) = %.4f", x, probabilidade)
sprintf("P(X > %.2f) = %.4f", x, 1-probabilidade)
# Calculo para 1 variável
media_populacional <- 20
desvio_padrao_populacional <- 5
x <- 18
z <- (x- media_populacional) / desvio_padrao_populacional
probabilidade <- pnorm(z)
round((1-probabilidade)*60)
sprintf("P(X < %.2f) = %.4f", x, probabilidade)
sprintf("P(X > %.2f) = %.4f", x, 1-probabilidade)
# Calculo para intervalo
media_populacional <- 20
desvio_padrao_populacional <- 5
x_inicial <- 15
x_final <- 28
z_inferior <- (x_inicial - media_populacional) / desvio_padrao_populacional
z_superior <- (x_final - media_populacional) / desvio_padrao_populacional
probabilidade <- pnorm(z_superior) - pnorm(z_inferior)
sprintf("P(%.2f < X < %.2f) = %.4f", x_inicial, x_final, probabilidade)
# Binomial ----------------------------------------------------------------
n <- 9 # Elementos de estudo
p <- 0.7
k <- 9 # Experimentos para obter sucesso
probabilidade.exata <- dbinom(x = k, size = n, prob = p)
probabilidade.menorouigual <- pbinom(q = k, size = n, prob = p, lower.tail = T)
probabilidade.maior <- 1 -probabilidade.menorouigual
probabilidade.maiorouigual <- probabilidade.maior + probabilidade.exata
probabilidade.menor <- probabilidade.menorouigual - probabilidade.exata
media = 30 * probabilidade.exata
sprintf("P(X = %d) é %.4f", k, probabilidade.exata)
sprintf("P(X <= %d) é %.4f", k, probabilidade.menorouigual)
sprintf("P(X > %d) é %.4f", k, probabilidade.maior)
sprintf("P(X >= %d) é %.4f", k, probabilidade.maiorouigual)
sprintf("P(X < %d) é %.4f", k, probabilidade.menor)
# Binomial ----------------------------------------------------------------
n <- 9 # Elementos de estudo
p <- 0.7
k <- 2 # Experimentos para obter sucesso
probabilidade.exata <- dbinom(x = k, size = n, prob = p)
probabilidade.menorouigual <- pbinom(q = k, size = n, prob = p, lower.tail = T)
probabilidade.maior <- 1 -probabilidade.menorouigual
probabilidade.maiorouigual <- probabilidade.maior + probabilidade.exata
probabilidade.menor <- probabilidade.menorouigual - probabilidade.exata
media = 30 * probabilidade.exata
sprintf("P(X = %d) é %.4f", k, probabilidade.exata)
sprintf("P(X <= %d) é %.4f", k, probabilidade.menorouigual)
sprintf("P(X > %d) é %.4f", k, probabilidade.maior)
sprintf("P(X >= %d) é %.4f", k, probabilidade.maiorouigual)
sprintf("P(X < %d) é %.4f", k, probabilidade.menor)
# Construindo uma tabela padronizada
Z <- seq(0, 3.99, by=0.01)
probabilidade <- pnorm(Z)
tabela_normal_padronizada <- matrix(probabilidade, ncol=10, byrow = T)
colnames(tabela_normal_padronizada) <- format(seq(0.00, 0.09, by=0.01))
rownames(tabela_normal_padronizada) <- format(seq(0.00, 3.90, by=0.10), digits =2, nsmall = 2)
tabela_normal_padronizada
